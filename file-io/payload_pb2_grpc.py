# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import payload_pb2 as payload__pb2


class RouteServiceStub(object):
  """a service interface (contract) that represents differ types of 
  request-response configurations (blocking, streaming)

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.request = channel.unary_unary(
        '/route.RouteService/request',
        request_serializer=payload__pb2.Route.SerializeToString,
        response_deserializer=payload__pb2.Route.FromString,
        )
    self.requestStreamFrom = channel.unary_stream(
        '/route.RouteService/requestStreamFrom',
        request_serializer=payload__pb2.Route.SerializeToString,
        response_deserializer=payload__pb2.Route.FromString,
        )


class RouteServiceServicer(object):
  """a service interface (contract) that represents differ types of 
  request-response configurations (blocking, streaming)

  """

  def request(self, request, context):
    """basic grpc call with blocking
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def requestStreamFrom(self, request, context):
    """the response may contain large amounts of data hence a
    streaming return (non-blocking return)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RouteServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'request': grpc.unary_unary_rpc_method_handler(
          servicer.request,
          request_deserializer=payload__pb2.Route.FromString,
          response_serializer=payload__pb2.Route.SerializeToString,
      ),
      'requestStreamFrom': grpc.unary_stream_rpc_method_handler(
          servicer.requestStreamFrom,
          request_deserializer=payload__pb2.Route.FromString,
          response_serializer=payload__pb2.Route.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'route.RouteService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
